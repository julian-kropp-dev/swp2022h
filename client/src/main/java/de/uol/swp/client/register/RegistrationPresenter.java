package de.uol.swp.client.register;

import com.google.common.base.Strings;
import com.google.common.eventbus.EventBus;
import com.google.common.eventbus.Subscribe;
import com.google.inject.Inject;
import de.uol.swp.client.AbstractPresenter;
import de.uol.swp.client.CancelEvent;
import de.uol.swp.client.register.event.RegistrationErrorEvent;
import de.uol.swp.common.user.response.RegistrationSuccessfulResponse;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextField;

/**
 * Manages the registration window.
 *
 * @see de.uol.swp.client.AbstractPresenter
 */
@SuppressWarnings("UnstableApiUsage")
public class RegistrationPresenter extends AbstractPresenter {

  public static final String FXML = "/fxml/view/RegistrationView.fxml";
  @FXML private TextField loginField;
  @FXML private TextField emailField;
  @FXML private PasswordField passwordField1;
  @FXML private PasswordField passwordField2;

  /**
   * Constructor.
   *
   * @param eventBus The EventBus set in ClientModule
   * @see de.uol.swp.client.di.ClientModule
   */
  @Inject
  public RegistrationPresenter(EventBus eventBus) {
    setEventBus(eventBus);
  }

  /**
   * Method called when the cancel button is pressed.
   *
   * <p>This Method is called when the cancel button is pressed. It posts an instance of the
   * RegistrationCanceledEvent to the EventBus the SceneManager is subscribed to.
   *
   * @param event The ActionEvent generated by pressing the register button
   * @see de.uol.swp.client.CancelEvent
   * @see de.uol.swp.client.SceneManager
   */
  @FXML
  void onCancelButtonPressed(ActionEvent event) {
    eventBus.post(new CancelEvent());
    event.consume();
  }

  /**
   * Method called when the register button is pressed.
   *
   * <p>This Method is called when the register button is pressed. It posts an instance of the
   * RegistrationErrorEvent to the EventBus the SceneManager is subscribed to, if one of the fields
   * is empty or the password fields are not equal. If everything is filled in correctly the user
   * service is requested to create a new user.
   *
   * <p>This method creates the user if username, mail address and password are valid
   *
   * @param event The ActionEvent generated by pressing the register button
   * @see de.uol.swp.client.register.event.RegistrationErrorEvent
   * @see de.uol.swp.client.SceneManager
   * @see de.uol.swp.client.user.UserService
   */
  @FXML
  void onRegisterButtonPressed(ActionEvent event) {
    if (Strings.isNullOrEmpty(loginField.getText())) {
      eventBus.post(new RegistrationErrorEvent("Der Spielername darf nicht leer sein."));
    } else if (Strings.isNullOrEmpty(emailField.getText())) {
      eventBus.post(new RegistrationErrorEvent("Die Mail Adresse darf nicht leer sein"));
    } else if (!emailField.getText().matches("^[a-zA-Z0-9_!#$%&'*+/=?`{|}~^.-]+@[a-zA-Z0-9.-]+$")) {
      eventBus.post(new RegistrationErrorEvent("Die eingegebene Mail Adresse ist ungültig."));
    } else if (!passwordField1.getText().equals(passwordField2.getText())) {
      eventBus.post(new RegistrationErrorEvent("Die Passwörter sind nicht gleich."));
    } else if (Strings.isNullOrEmpty(passwordField1.getText())) {
      eventBus.post(new RegistrationErrorEvent("Das Passwort darf nicht leer sein"));
    } else {
      userService.createUser(loginField.getText(), passwordField1.getText(), emailField.getText());
    }
    event.consume();
  }

  /**
   * Handels the RegistrationSuccessfulResponse found on the Eventbus. It clears the personal data
   * in the registration fields after successful registration.
   *
   * @param msg RegistrationSuccessfulResponse
   */
  @Subscribe
  public void onRegistrationSuccessfulResponse(RegistrationSuccessfulResponse msg) {
    passwordField1.clear();
    passwordField2.clear();
    loginField.clear();
    emailField.clear();
  }
}
